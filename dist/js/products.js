function showRespectiveCategories(t){"BUTTON"==t.target.tagName&&(resetAll(),"men-switch"==t.target.className?document.querySelector(".inner-container-men").style.display="grid":document.querySelector(".inner-container-women").style.display="grid")}function resetAll(){document.querySelector(".inner-container-men").style.display="none",document.querySelector(".inner-container-women").style.display="none"}function handleCartButtons(t){if(t.preventDefault(),"BUTTON"==t.target.tagName){let e=t.target.dataset.id,r=model.getProductsFromLs().find(t=>t.id==e);r&&(model.addItemToLsCart(r),view.updateCart(),t.target.textContent="In Cart",t.target.disabled=!0,view.showAddAlert(r),document.querySelector(".alert").addEventListener("click",t=>{"BUTTON"==t.target.tagName&&(t.preventDefault(),t.currentTarget.innerHTML="",t.currentTarget.style.display="none")}))}else if("each-product"==t.target.className||"IMG"==t.target.tagName||"content-container"==t.target.className||"product-name"==t.target.className||"product-price"==t.target.className||"availability"==t.target.className||"product-price-val"==t.target.className)if("each-product"==t.target.className){let e=t.target.dataset.id;model.setCurrentItemInCart(e),window.location.href="product.html"}else{let e=t.target.closest("a").dataset.id;model.setCurrentItemInCart(e),window.location.href="product.html"}}function handleNavBar(t){console.log("working"),document.querySelector(".nav-slide").classList.toggle("open"),t.preventDefault()}class Model{doesCurrentItemExistInLs(){return!!localStorage.getItem("shoeproci")}doesProductsExistInLs(){return!!localStorage.getItem("shoeproprods")}doesLatestProductsExistInLs(){return!!localStorage.getItem("shoeprolp")}doesGisExistInLs(){return!!localStorage.getItem("shoeprogis")}doesCartExistInLs(){return!!localStorage.getItem("shoeprocart")}getProductsFromLs(){return JSON.parse(localStorage.getItem("shoeproprods"))}getCartFromLs(){return JSON.parse(localStorage.getItem("shoeprocart"))}getLatestProductsFromLs(){return JSON.parse(localStorage.getItem("shoeprolp"))}getGisFromLs(){return JSON.parse(localStorage.getItem("shoeprogis"))}addItemToLsCart(t){let e;this.doesCartExistInLs()?(e=this.getCartFromLs(),t={...t,quantity:1},e.push(t),localStorage.setItem("shoeprocart",JSON.stringify(e))):(e=[],t={...t,quantity:1},e.push(t),localStorage.setItem("shoeprocart",JSON.stringify(e)))}addProductsToLs(t){this.doesProductsExistInLs()||localStorage.setItem("shoeproprods",JSON.stringify(t))}addGisToLs(t){this.doesGisExistInLs()||localStorage.setItem("shoeprogis",JSON.stringify(t))}addLatestProductsToLs(t){this.doesLatestProductsExistInLs()||localStorage.setItem("shoeprolp",JSON.stringify(t))}async fetchItemsFromJson(){try{let t=await fetch("./products.json");t=await t.json();let e=t.items,r=e.map(callback.deconstructFetchResult),a=e.filter(callback.findLatestProducts);a=a.map(callback.deconstructProductsCat).sort(callback.sortProductsCat);let s=e.filter(callback.findGoodsInStock);return s=s.map(callback.deconstructProductsCat).sort(callback.sortProductsCat),{products:r,latestProducts:a,goodsInStock:s}}catch(t){console.log(t.message)}}createCartInLs(){this.doesCartExistInLs()||localStorage.setItem("shoeprocart",JSON.stringify([]))}createCurrentItemInLs(){this.doesCurrentItemExistInLs()||localStorage.setItem("shoeproci",JSON.stringify([]))}setCurrentItemInCart(t){if(model.doesCurrentItemExistInLs()){let e=JSON.parse(localStorage.getItem("shoeproci"));0==e.length?(e.push(t),localStorage.setItem("shoeproci",JSON.stringify(e))):(e.splice(0,1,t),localStorage.setItem("shoeproci",JSON.stringify(e)))}}}const model=new Model;class View{displayMenProducts(t){let e="";t.forEach(t=>{e+=`\n      <a href="./product.html" data-id="${t.id}" class="each-product">\n            <div class="img-container">\n              <img src="${t.url}" alt="">\n            </div>\n            <div class="content-container">\n              <p class="product-name">${t.title}</p>\n              <p class="product-price">Price: &nbsp;<span class="product-price-val" >${t.price.toLocaleString()}</span></p>\n              <p class="availability">Availability: &nbsp;<span class="av-value">${t.availability}</span></p>\n              <button data-id="${t.id}" >Add to cart</button>\n            </div>\n          </a>\n      `}),document.querySelector(".inner-container-men").innerHTML=e}displayWomenProducts(t){let e="";t.forEach(t=>{e+=`\n      <a href="./product.html" data-id="${t.id}" class="each-product">\n            <div class="img-container">\n              <img src="${t.url}" alt="">\n            </div>\n            <div class="content-container">\n              <p class="product-name">${t.title}</p>\n              <p class="product-price">Price: &nbsp;<span class="product-price-val" >${t.price.toLocaleString()}</span></p>\n              <p class="availability">Availability: &nbsp;<span class="av-value">${t.availability}</span></p>\n              <button data-id="${t.id}" >Add to cart</button>\n            </div>\n          </a>\n      `}),document.querySelector(".inner-container-women").innerHTML=e}displayGoodsInStock(t){let e="";t.forEach(t=>{e+=`\n      <a href="./product.html" data-id="${t.id}" class="each-product">\n            <div class="img-container">\n              <img src="${t.url}" alt="">\n            </div>\n            <div class="content-container">\n              <p class="product-name">${t.title}</p>\n              <p class="product-price">Price: &nbsp;<span class="product-price-val" >${t.price.toLocaleString()}</span></p>\n              <p class="availability">Availability: &nbsp;<span class="av-value">${t.availability}</span></p>\n              <button data-id="${t.id}" >Add to cart</button>\n            </div>\n          </a>\n      `}),document.querySelector(".inner-container-gis").innerHTML=e}updateCart(){let t=model.getCartFromLs();document.querySelector(".cart-value").textContent=t.length}confirmIfItemInCart(){Array.from(document.querySelectorAll(".each-product button")).forEach(t=>{let e=t.dataset.id;model.getCartFromLs().find(t=>t.id==e)&&(t.textContent="In Cart",t.disabled=!0)})}showAddAlert(t){let e=`\n    <div class="alert-inner">\n      <h3 class="alert-header">Item Added to Cart</h3>\n      <div class="alert-img">\n        <img src="${t.url}" alt="">\n      </div>\n      <p class="alert-name">${t.title}</p>\n      <p class="alert-price">Price: <span class="alert-price-value">${t.price.toLocaleString()}</span></p>\n      <button class="alert-cs">Continue Shopping</button>\n      <a href="./cart.html" class="alert-gtc">Go To Cart</a>\n    </div>\n    `;document.querySelector(".alert").style.display="flex",document.querySelector(".alert").innerHTML=e}}const view=new View;class Controller{init(){document.querySelector(".relative").addEventListener("click",handleCartButtons),document.addEventListener("DOMContentLoaded",()=>{if(document.querySelector(".current-year").textContent=(new Date).getFullYear(),document.querySelector(".button-section").addEventListener("click",showRespectiveCategories),document.querySelector(".menu").addEventListener("click",handleNavBar),document.querySelector(".close").addEventListener("click",t=>{document.querySelector(".nav-slide").classList.remove("open"),t.preventDefault()}),model.doesProductsExistInLs()){view.updateCart();let t=model.getProductsFromLs().filter(t=>"men"==t.category),e=model.getProductsFromLs().filter(t=>"women"==t.category);view.displayMenProducts(t),view.displayWomenProducts(e),view.confirmIfItemInCart(),console.log(t,e)}})}}const controller=new Controller;class Callback{deconstructFetchResult(t){let{title:e,price:r,brand:a,description:s,availability:o,category:n}=t.fields,{id:l}=t.sys,{url:c}=t.fields.image.fields.file;return{title:e,price:r,brand:a,description:s,availability:o,category:n,id:l,url:c}}deconstructProductsCat(t){let{title:e,price:r,brand:a,description:s,availability:o,category:n,attr:l}=t.fields,{id:c}=t.sys,{url:i}=t.fields.image.fields.file;return{title:e,price:r,brand:a,description:s,attr:l,availability:o,category:n,id:c,url:i}}findLatestProducts(t){return"latest products"===t.fields.attr}findGoodsInStock(t){return"goods in stock"===t.fields.attr}sortProductsCat(t,e){return t.price-e.price}}const callback=new Callback;controller.init();